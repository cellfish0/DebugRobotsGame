//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\User\source\repos\ConsoleApp2\ConsoleApp2\Test\Robo.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ConsoleApp2.Test {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class RoboParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, COMMENT=7, MEMBER_ACCESS=8, 
		BOOL_OPERATOR=9, ASSIGN_OPERATOR=10, NEGATION_OPERATOR=11, EQUAL=12, NOT_EQUAL=13, 
		MORE_=14, LESS_=15, MOREOREQUAL=16, LESSOREQUAL=17, COMMENT_START=18, 
		DIVIDE=19, INTEGER=20, FLOAT=21, MINUS=22, STRING=23, BOOL=24, NULL=25, 
		OP_BRACKET=26, CL_BRACKET=27, NEWLINE=28, WS=29, WHILE=30, IF=31, ELSE=32, 
		GLOBAL_KEYWORD=33, IDENTIFIER=34, NOTEQUAL=35;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_statement = 2, RULE_ifBlock = 3, 
		RULE_elseIfBlock = 4, RULE_whileBlock = 5, RULE_assignment = 6, RULE_functionCall = 7, 
		RULE_block = 8, RULE_identifierOrMember = 9, RULE_keyword = 10, RULE_parent = 11, 
		RULE_member = 12, RULE_expression = 13, RULE_multOp = 14, RULE_addOp = 15, 
		RULE_boolOp = 16, RULE_compareOp = 17, RULE_constant = 18;
	public static readonly string[] ruleNames = {
		"program", "line", "statement", "ifBlock", "elseIfBlock", "whileBlock", 
		"assignment", "functionCall", "block", "identifierOrMember", "keyword", 
		"parent", "member", "expression", "multOp", "addOp", "boolOp", "compareOp", 
		"constant"
	};

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'*'", "'%'", "'+'", null, "'.'", null, null, 
		null, "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'//'", "'/'", null, 
		null, "'-'", null, null, "'null'", "'{'", "'}'", null, null, "'while'", 
		"'if'", "'else'", "'global'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "COMMENT", "MEMBER_ACCESS", 
		"BOOL_OPERATOR", "ASSIGN_OPERATOR", "NEGATION_OPERATOR", "EQUAL", "NOT_EQUAL", 
		"MORE_", "LESS_", "MOREOREQUAL", "LESSOREQUAL", "COMMENT_START", "DIVIDE", 
		"INTEGER", "FLOAT", "MINUS", "STRING", "BOOL", "NULL", "OP_BRACKET", "CL_BRACKET", 
		"NEWLINE", "WS", "WHILE", "IF", "ELSE", "GLOBAL_KEYWORD", "IDENTIFIER", 
		"NOTEQUAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Robo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RoboParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(RoboParser.Eof, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(RoboParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(RoboParser.NEWLINE, i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 38; Match(NEWLINE);
					}
					} 
				}
				State = 43;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,0,_ctx);
			}
			State = 47;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHILE) | (1L << IF) | (1L << GLOBAL_KEYWORD) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 44; line();
				}
				}
				State = 49;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 50; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public WhileBlockContext whileBlock() {
			return GetRuleContext<WhileBlockContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(RoboParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(RoboParser.NEWLINE, i);
		}
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLine(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case GLOBAL_KEYWORD:
			case IDENTIFIER:
				{
				State = 52; statement();
				}
				break;
			case IF:
				{
				State = 53; ifBlock();
				}
				break;
			case WHILE:
				{
				State = 54; whileBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 60;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==NEWLINE) {
				{
				{
				State = 57; Match(NEWLINE);
				}
				}
				State = 62;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 63; assignment();
				}
				break;

			case 2:
				{
				State = 64; functionCall();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBlockContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(RoboParser.IF, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(RoboParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(RoboParser.NEWLINE, i);
		}
		public ITerminalNode ELSE() { return GetToken(RoboParser.ELSE, 0); }
		public ElseIfBlockContext elseIfBlock() {
			return GetRuleContext<ElseIfBlockContext>(0);
		}
		public IfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfBlockContext ifBlock() {
		IfBlockContext _localctx = new IfBlockContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_ifBlock);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(IF);
			State = 71;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 68; Match(NEWLINE);
					}
					} 
				}
				State = 73;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 74; Match(T__0);
			State = 75; expression(0);
			State = 76; Match(T__1);
			State = 80;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 77; Match(NEWLINE);
					}
					} 
				}
				State = 82;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			State = 83; block();
			State = 87;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 84; Match(NEWLINE);
					}
					} 
				}
				State = 89;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 98;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ELSE) {
				{
				State = 90; Match(ELSE);
				State = 94;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NEWLINE) {
					{
					{
					State = 91; Match(NEWLINE);
					}
					}
					State = 96;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 97; elseIfBlock();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfBlockContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBlockContext ifBlock() {
			return GetRuleContext<IfBlockContext>(0);
		}
		public ElseIfBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterElseIfBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitElseIfBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfBlockContext elseIfBlock() {
		ElseIfBlockContext _localctx = new ElseIfBlockContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_elseIfBlock);
		try {
			State = 102;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case OP_BRACKET:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100; block();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; ifBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileBlockContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(RoboParser.WHILE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode[] NEWLINE() { return GetTokens(RoboParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(RoboParser.NEWLINE, i);
		}
		public WhileBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterWhileBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitWhileBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileBlockContext whileBlock() {
		WhileBlockContext _localctx = new WhileBlockContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_whileBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 104; Match(WHILE);
			State = 108;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 105; Match(NEWLINE);
					}
					} 
				}
				State = 110;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,11,_ctx);
			}
			State = 111; Match(T__0);
			State = 112; expression(0);
			State = 113; Match(T__1);
			State = 117;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 114; Match(NEWLINE);
					}
					} 
				}
				State = 119;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,12,_ctx);
			}
			State = 120; block();
			State = 124;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 121; Match(NEWLINE);
					}
					} 
				}
				State = 126;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public IdentifierOrMemberContext identifierOrMember() {
			return GetRuleContext<IdentifierOrMemberContext>(0);
		}
		public ITerminalNode ASSIGN_OPERATOR() { return GetToken(RoboParser.ASSIGN_OPERATOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GLOBAL_KEYWORD) {
				{
				State = 127; keyword();
				}
			}

			State = 130; identifierOrMember();
			State = 131; Match(ASSIGN_OPERATOR);
			State = 132; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IdentifierOrMemberContext identifierOrMember() {
			return GetRuleContext<IdentifierOrMemberContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; identifierOrMember();
			State = 135; Match(T__0);
			State = 144;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << NEGATION_OPERATOR) | (1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << NULL) | (1L << IDENTIFIER))) != 0)) {
				{
				State = 136; expression(0);
				State = 141;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==T__2) {
					{
					{
					State = 137; Match(T__2);
					State = 138; expression(0);
					}
					}
					State = 143;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 146; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OP_BRACKET() { return GetToken(RoboParser.OP_BRACKET, 0); }
		public ITerminalNode CL_BRACKET() { return GetToken(RoboParser.CL_BRACKET, 0); }
		public ITerminalNode[] NEWLINE() { return GetTokens(RoboParser.NEWLINE); }
		public ITerminalNode NEWLINE(int i) {
			return GetToken(RoboParser.NEWLINE, i);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(OP_BRACKET);
			State = 152;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 149; Match(NEWLINE);
					}
					} 
				}
				State = 154;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
			}
			State = 158;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << WHILE) | (1L << IF) | (1L << GLOBAL_KEYWORD) | (1L << IDENTIFIER))) != 0)) {
				{
				{
				State = 155; line();
				}
				}
				State = 160;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 161; Match(CL_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierOrMemberContext : ParserRuleContext {
		public ParentContext parent() {
			return GetRuleContext<ParentContext>(0);
		}
		public ITerminalNode[] MEMBER_ACCESS() { return GetTokens(RoboParser.MEMBER_ACCESS); }
		public ITerminalNode MEMBER_ACCESS(int i) {
			return GetToken(RoboParser.MEMBER_ACCESS, i);
		}
		public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public IdentifierOrMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierOrMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterIdentifierOrMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitIdentifierOrMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierOrMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierOrMemberContext identifierOrMember() {
		IdentifierOrMemberContext _localctx = new IdentifierOrMemberContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_identifierOrMember);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; parent();
			State = 168;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1+1 ) {
					{
					{
					State = 164; Match(MEMBER_ACCESS);
					State = 165; member();
					}
					} 
				}
				State = 170;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,19,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode GLOBAL_KEYWORD() { return GetToken(RoboParser.GLOBAL_KEYWORD, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(GLOBAL_KEYWORD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParentContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RoboParser.IDENTIFIER, 0); }
		public ParentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parent; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterParent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitParent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParent(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParentContext parent() {
		ParentContext _localctx = new ParentContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_parent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(RoboParser.IDENTIFIER, 0); }
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitMember(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConstantExpressionContext : ExpressionContext {
		public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		public ConstantExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BoolOpContext boolOp() {
			return GetRuleContext<BoolOpContext>(0);
		}
		public BoolExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterBoolExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitBoolExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AddOpContext addOp() {
			return GetRuleContext<AddOpContext>(0);
		}
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		public IdentifierOrMemberContext identifierOrMember() {
			return GetRuleContext<IdentifierOrMemberContext>(0);
		}
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterIdentifierExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitIdentifierExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExpressionContext {
		public ITerminalNode NEGATION_OPERATOR() { return GetToken(RoboParser.NEGATION_OPERATOR, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public CompareOpContext compareOp() {
			return GetRuleContext<CompareOpContext>(0);
		}
		public ComparisonExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultOpContext multOp() {
			return GetRuleContext<MultOpContext>(0);
		}
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 178; constant();
				}
				break;

			case 2:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 179; identifierOrMember();
				}
				break;

			case 3:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 180; functionCall();
				}
				break;

			case 4:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 181; Match(T__0);
				State = 182; expression(0);
				State = 183; Match(T__1);
				}
				break;

			case 5:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 185; Match(NEGATION_OPERATOR);
				State = 186; expression(5);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 207;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 205;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,21,_ctx) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 189;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 190; multOp();
						State = 191; expression(5);
						}
						break;

					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 193;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 194; addOp();
						State = 195; expression(4);
						}
						break;

					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 197;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 198; compareOp();
						State = 199; expression(3);
						}
						break;

					case 4:
						{
						_localctx = new BoolExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 201;
						if (!(Precpred(_ctx, 1))) throw new FailedPredicateException(this, "Precpred(_ctx, 1)");
						State = 202; boolOp();
						State = 203; expression(2);
						}
						break;
					}
					} 
				}
				State = 209;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultOpContext : ParserRuleContext {
		public ITerminalNode DIVIDE() { return GetToken(RoboParser.DIVIDE, 0); }
		public MultOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterMultOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitMultOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultOpContext multOp() {
		MultOpContext _localctx = new MultOpContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_multOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << DIVIDE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddOpContext : ParserRuleContext {
		public AddOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterAddOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitAddOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AddOpContext addOp() {
		AddOpContext _localctx = new AddOpContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_addOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212;
			_la = _input.La(1);
			if ( !(_la==T__5 || _la==MINUS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolOpContext : ParserRuleContext {
		public ITerminalNode BOOL_OPERATOR() { return GetToken(RoboParser.BOOL_OPERATOR, 0); }
		public BoolOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterBoolOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitBoolOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BoolOpContext boolOp() {
		BoolOpContext _localctx = new BoolOpContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_boolOp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(BOOL_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompareOpContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(RoboParser.EQUAL, 0); }
		public ITerminalNode NOTEQUAL() { return GetToken(RoboParser.NOTEQUAL, 0); }
		public ITerminalNode MORE_() { return GetToken(RoboParser.MORE_, 0); }
		public ITerminalNode LESS_() { return GetToken(RoboParser.LESS_, 0); }
		public ITerminalNode MOREOREQUAL() { return GetToken(RoboParser.MOREOREQUAL, 0); }
		public ITerminalNode LESSOREQUAL() { return GetToken(RoboParser.LESSOREQUAL, 0); }
		public CompareOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compareOp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterCompareOp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitCompareOp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompareOp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompareOpContext compareOp() {
		CompareOpContext _localctx = new CompareOpContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_compareOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << MORE_) | (1L << LESS_) | (1L << MOREOREQUAL) | (1L << LESSOREQUAL) | (1L << NOTEQUAL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		public ITerminalNode INTEGER() { return GetToken(RoboParser.INTEGER, 0); }
		public ITerminalNode FLOAT() { return GetToken(RoboParser.FLOAT, 0); }
		public ITerminalNode STRING() { return GetToken(RoboParser.STRING, 0); }
		public ITerminalNode BOOL() { return GetToken(RoboParser.BOOL, 0); }
		public ITerminalNode NULL() { return GetToken(RoboParser.NULL, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRoboListener typedListener = listener as IRoboListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRoboVisitor<TResult> typedVisitor = visitor as IRoboVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INTEGER) | (1L << FLOAT) | (1L << STRING) | (1L << BOOL) | (1L << NULL))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 4);

		case 1: return Precpred(_ctx, 3);

		case 2: return Precpred(_ctx, 2);

		case 3: return Precpred(_ctx, 1);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3%\xDF\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x3\x2\a\x2*\n"+
		"\x2\f\x2\xE\x2-\v\x2\x3\x2\a\x2\x30\n\x2\f\x2\xE\x2\x33\v\x2\x3\x2\x3"+
		"\x2\x3\x3\x3\x3\x3\x3\x5\x3:\n\x3\x3\x3\a\x3=\n\x3\f\x3\xE\x3@\v\x3\x3"+
		"\x4\x3\x4\x5\x4\x44\n\x4\x3\x5\x3\x5\a\x5H\n\x5\f\x5\xE\x5K\v\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\a\x5Q\n\x5\f\x5\xE\x5T\v\x5\x3\x5\x3\x5\a\x5X\n\x5"+
		"\f\x5\xE\x5[\v\x5\x3\x5\x3\x5\a\x5_\n\x5\f\x5\xE\x5\x62\v\x5\x3\x5\x5"+
		"\x5\x65\n\x5\x3\x6\x3\x6\x5\x6i\n\x6\x3\a\x3\a\a\am\n\a\f\a\xE\ap\v\a"+
		"\x3\a\x3\a\x3\a\x3\a\a\av\n\a\f\a\xE\ay\v\a\x3\a\x3\a\a\a}\n\a\f\a\xE"+
		"\a\x80\v\a\x3\b\x5\b\x83\n\b\x3\b\x3\b\x3\b\x3\b\x3\t\x3\t\x3\t\x3\t\x3"+
		"\t\a\t\x8E\n\t\f\t\xE\t\x91\v\t\x5\t\x93\n\t\x3\t\x3\t\x3\n\x3\n\a\n\x99"+
		"\n\n\f\n\xE\n\x9C\v\n\x3\n\a\n\x9F\n\n\f\n\xE\n\xA2\v\n\x3\n\x3\n\x3\v"+
		"\x3\v\x3\v\a\v\xA9\n\v\f\v\xE\v\xAC\v\v\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x5\xF\xBE"+
		"\n\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF"+
		"\x3\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\xD0\n\xF\f\xF\xE\xF\xD3\v\xF\x3\x10"+
		"\x3\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14"+
		"\n+IRnw~\x9A\xAA\x2\x3\x1C\x15\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2"+
		"\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2"+
		"&\x2\x2\x6\x4\x2\x6\a\x15\x15\x4\x2\b\b\x18\x18\x5\x2\xE\xE\x10\x13%%"+
		"\x4\x2\x16\x17\x19\x1B\xE8\x2+\x3\x2\x2\x2\x4\x39\x3\x2\x2\x2\x6\x43\x3"+
		"\x2\x2\x2\b\x45\x3\x2\x2\x2\nh\x3\x2\x2\x2\fj\x3\x2\x2\x2\xE\x82\x3\x2"+
		"\x2\x2\x10\x88\x3\x2\x2\x2\x12\x96\x3\x2\x2\x2\x14\xA5\x3\x2\x2\x2\x16"+
		"\xAD\x3\x2\x2\x2\x18\xAF\x3\x2\x2\x2\x1A\xB1\x3\x2\x2\x2\x1C\xBD\x3\x2"+
		"\x2\x2\x1E\xD4\x3\x2\x2\x2 \xD6\x3\x2\x2\x2\"\xD8\x3\x2\x2\x2$\xDA\x3"+
		"\x2\x2\x2&\xDC\x3\x2\x2\x2(*\a\x1E\x2\x2)(\x3\x2\x2\x2*-\x3\x2\x2\x2+"+
		",\x3\x2\x2\x2+)\x3\x2\x2\x2,\x31\x3\x2\x2\x2-+\x3\x2\x2\x2.\x30\x5\x4"+
		"\x3\x2/.\x3\x2\x2\x2\x30\x33\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x31\x32\x3\x2"+
		"\x2\x2\x32\x34\x3\x2\x2\x2\x33\x31\x3\x2\x2\x2\x34\x35\a\x2\x2\x3\x35"+
		"\x3\x3\x2\x2\x2\x36:\x5\x6\x4\x2\x37:\x5\b\x5\x2\x38:\x5\f\a\x2\x39\x36"+
		"\x3\x2\x2\x2\x39\x37\x3\x2\x2\x2\x39\x38\x3\x2\x2\x2:>\x3\x2\x2\x2;=\a"+
		"\x1E\x2\x2<;\x3\x2\x2\x2=@\x3\x2\x2\x2><\x3\x2\x2\x2>?\x3\x2\x2\x2?\x5"+
		"\x3\x2\x2\x2@>\x3\x2\x2\x2\x41\x44\x5\xE\b\x2\x42\x44\x5\x10\t\x2\x43"+
		"\x41\x3\x2\x2\x2\x43\x42\x3\x2\x2\x2\x44\a\x3\x2\x2\x2\x45I\a!\x2\x2\x46"+
		"H\a\x1E\x2\x2G\x46\x3\x2\x2\x2HK\x3\x2\x2\x2IJ\x3\x2\x2\x2IG\x3\x2\x2"+
		"\x2JL\x3\x2\x2\x2KI\x3\x2\x2\x2LM\a\x3\x2\x2MN\x5\x1C\xF\x2NR\a\x4\x2"+
		"\x2OQ\a\x1E\x2\x2PO\x3\x2\x2\x2QT\x3\x2\x2\x2RS\x3\x2\x2\x2RP\x3\x2\x2"+
		"\x2SU\x3\x2\x2\x2TR\x3\x2\x2\x2UY\x5\x12\n\x2VX\a\x1E\x2\x2WV\x3\x2\x2"+
		"\x2X[\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\x64\x3\x2\x2\x2[Y\x3\x2"+
		"\x2\x2\\`\a\"\x2\x2]_\a\x1E\x2\x2^]\x3\x2\x2\x2_\x62\x3\x2\x2\x2`^\x3"+
		"\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x63\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x63\x65"+
		"\x5\n\x6\x2\x64\\\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\t\x3\x2\x2\x2\x66"+
		"i\x5\x12\n\x2gi\x5\b\x5\x2h\x66\x3\x2\x2\x2hg\x3\x2\x2\x2i\v\x3\x2\x2"+
		"\x2jn\a \x2\x2km\a\x1E\x2\x2lk\x3\x2\x2\x2mp\x3\x2\x2\x2no\x3\x2\x2\x2"+
		"nl\x3\x2\x2\x2oq\x3\x2\x2\x2pn\x3\x2\x2\x2qr\a\x3\x2\x2rs\x5\x1C\xF\x2"+
		"sw\a\x4\x2\x2tv\a\x1E\x2\x2ut\x3\x2\x2\x2vy\x3\x2\x2\x2wx\x3\x2\x2\x2"+
		"wu\x3\x2\x2\x2xz\x3\x2\x2\x2yw\x3\x2\x2\x2z~\x5\x12\n\x2{}\a\x1E\x2\x2"+
		"|{\x3\x2\x2\x2}\x80\x3\x2\x2\x2~\x7F\x3\x2\x2\x2~|\x3\x2\x2\x2\x7F\r\x3"+
		"\x2\x2\x2\x80~\x3\x2\x2\x2\x81\x83\x5\x16\f\x2\x82\x81\x3\x2\x2\x2\x82"+
		"\x83\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x85\x5\x14\v\x2\x85\x86\a\f\x2"+
		"\x2\x86\x87\x5\x1C\xF\x2\x87\xF\x3\x2\x2\x2\x88\x89\x5\x14\v\x2\x89\x92"+
		"\a\x3\x2\x2\x8A\x8F\x5\x1C\xF\x2\x8B\x8C\a\x5\x2\x2\x8C\x8E\x5\x1C\xF"+
		"\x2\x8D\x8B\x3\x2\x2\x2\x8E\x91\x3\x2\x2\x2\x8F\x8D\x3\x2\x2\x2\x8F\x90"+
		"\x3\x2\x2\x2\x90\x93\x3\x2\x2\x2\x91\x8F\x3\x2\x2\x2\x92\x8A\x3\x2\x2"+
		"\x2\x92\x93\x3\x2\x2\x2\x93\x94\x3\x2\x2\x2\x94\x95\a\x4\x2\x2\x95\x11"+
		"\x3\x2\x2\x2\x96\x9A\a\x1C\x2\x2\x97\x99\a\x1E\x2\x2\x98\x97\x3\x2\x2"+
		"\x2\x99\x9C\x3\x2\x2\x2\x9A\x9B\x3\x2\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\xA0"+
		"\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9D\x9F\x5\x4\x3\x2\x9E\x9D\x3\x2\x2"+
		"\x2\x9F\xA2\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3"+
		"\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA4\a\x1D\x2\x2\xA4\x13\x3\x2\x2"+
		"\x2\xA5\xAA\x5\x18\r\x2\xA6\xA7\a\n\x2\x2\xA7\xA9\x5\x1A\xE\x2\xA8\xA6"+
		"\x3\x2\x2\x2\xA9\xAC\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAA\xA8\x3\x2\x2"+
		"\x2\xAB\x15\x3\x2\x2\x2\xAC\xAA\x3\x2\x2\x2\xAD\xAE\a#\x2\x2\xAE\x17\x3"+
		"\x2\x2\x2\xAF\xB0\a$\x2\x2\xB0\x19\x3\x2\x2\x2\xB1\xB2\a$\x2\x2\xB2\x1B"+
		"\x3\x2\x2\x2\xB3\xB4\b\xF\x1\x2\xB4\xBE\x5&\x14\x2\xB5\xBE\x5\x14\v\x2"+
		"\xB6\xBE\x5\x10\t\x2\xB7\xB8\a\x3\x2\x2\xB8\xB9\x5\x1C\xF\x2\xB9\xBA\a"+
		"\x4\x2\x2\xBA\xBE\x3\x2\x2\x2\xBB\xBC\a\r\x2\x2\xBC\xBE\x5\x1C\xF\a\xBD"+
		"\xB3\x3\x2\x2\x2\xBD\xB5\x3\x2\x2\x2\xBD\xB6\x3\x2\x2\x2\xBD\xB7\x3\x2"+
		"\x2\x2\xBD\xBB\x3\x2\x2\x2\xBE\xD1\x3\x2\x2\x2\xBF\xC0\f\x6\x2\x2\xC0"+
		"\xC1\x5\x1E\x10\x2\xC1\xC2\x5\x1C\xF\a\xC2\xD0\x3\x2\x2\x2\xC3\xC4\f\x5"+
		"\x2\x2\xC4\xC5\x5 \x11\x2\xC5\xC6\x5\x1C\xF\x6\xC6\xD0\x3\x2\x2\x2\xC7"+
		"\xC8\f\x4\x2\x2\xC8\xC9\x5$\x13\x2\xC9\xCA\x5\x1C\xF\x5\xCA\xD0\x3\x2"+
		"\x2\x2\xCB\xCC\f\x3\x2\x2\xCC\xCD\x5\"\x12\x2\xCD\xCE\x5\x1C\xF\x4\xCE"+
		"\xD0\x3\x2\x2\x2\xCF\xBF\x3\x2\x2\x2\xCF\xC3\x3\x2\x2\x2\xCF\xC7\x3\x2"+
		"\x2\x2\xCF\xCB\x3\x2\x2\x2\xD0\xD3\x3\x2\x2\x2\xD1\xCF\x3\x2\x2\x2\xD1"+
		"\xD2\x3\x2\x2\x2\xD2\x1D\x3\x2\x2\x2\xD3\xD1\x3\x2\x2\x2\xD4\xD5\t\x2"+
		"\x2\x2\xD5\x1F\x3\x2\x2\x2\xD6\xD7\t\x3\x2\x2\xD7!\x3\x2\x2\x2\xD8\xD9"+
		"\a\v\x2\x2\xD9#\x3\x2\x2\x2\xDA\xDB\t\x4\x2\x2\xDB%\x3\x2\x2\x2\xDC\xDD"+
		"\t\x5\x2\x2\xDD\'\x3\x2\x2\x2\x19+\x31\x39>\x43IRY`\x64hnw~\x82\x8F\x92"+
		"\x9A\xA0\xAA\xBD\xCF\xD1";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace ConsoleApp2.Test
